{"name":"PyInventor","tagline":"3D Graphics in Python with Open Inventor","body":"PyInventor provides a Python binding for the [Open Inventor](http://en.wikipedia.org/wiki/Open_Inventor) 3D graphics toolkit, which is an object oriented, high level programming layer for [OpenGL](http://en.wikipedia.org/wiki/OpenGL). The Open Inventor toolkit is considerably easier to learn and use than OpenGL, hence the motto \"3D programming for humans\".\r\n\r\nThe main goals for the Python integration project are:\r\n- Enable the creation, modification and viewing of scene graphs, both programmatically with Python as well as with the help of a graphical editor\r\n- Offer a flexible yet easy to use \"Python-like\" interface to Open Inventor\r\n- Support of Open Inventor extensions without introducing compile time dependencies\r\n- Platform independent and compatible with all major implementations ([Coin3D](https://bitbucket.org/Coin3D/coin/wiki/Home), [SGI](http://oss.sgi.com/projects/inventor/) and [VSG](http://www.vsg3d.com/open-inventor/sdk))\r\n- Undemanding maintenance of the library\r\n- Compatible with Python 3\r\n\r\n## Using the Module\r\nFor an overview on how to use it please visit the [wiki](https://github.com/TheHubbit/PyInventor/wiki) where you can find a [getting started guide](https://github.com/TheHubbit/PyInventor/wiki/Using-PyInventor) and [examples](https://github.com/TheHubbit/PyInventor/wiki/PyInventor-Examples).\r\n\r\n![Preview](images/PyInventorExamples.png?raw=true)\r\n\r\nThe documentation for all classes, functions and data used to interface with the Open Inventor toolkit is built into the library and therefore available in the help system of the *IPython* shell and most development environments. It can also be viewed with the *pydoc* tool and is accessible as online [class reference](man/PyInventor.html).\r\n\r\nThe class documentation for the 3D graphics toolkit itself can be found [here](http://coin3d.bitbucket.org/Coin/index.html).\r\n\r\n## Scene Graph Editor\r\nThe included Scene Graph Editor application can render scene graph files (Inventor, VRML, 3D Studio) and their structure in a tree view. It furthermore allows adding, removing or rearranging nodes within the scene graph as well as editing of field values, immediately making those changes visible in the viewport.\r\n\r\nTo run the editor, simply type the following command:\r\n```\r\npython -m PyInventor\r\n```\r\nExtension libraries that provide additional scene objects can be loaded by defining the *IV_LIBS* environment variable, which can contain dynamically loadable libraries separated by a semicolon. Those libraries need to define a function called *initAllClasses()* that register all scene objects in the global database.\r\n\r\n![Scene Graph Editor](images/SceneGraphEditor.png?raw=true)\r\n\r\n\r\n## License\r\nPyInventor is distributed under the BSD 3-Clause License. For full terms see the included COPYING file.\r\n\r\n## Installation\r\nThe software can be compiled and installed from source using included *distutils* setup script. CPython 3.x, numpy and Open Inventor / Coin are required on the target system. The setup script is pre-configured for Coin on Windows and OS X. For other configurations the variables that point to the Inventor include and library paths as well as the library names may have to be adjusted.\r\n```\r\n# Open Inventor paths and libraries:\r\noivincpath = ''\r\noivlibpath = ''\r\noivlib = []\r\n```\r\n\r\nAfterwards calling the following command will first compile PyInventor and then copy the binaries into the site-packages directory.\r\n```\r\npython setup.py install\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}